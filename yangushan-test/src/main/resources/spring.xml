<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
	   https://www.springframework.org/schema/beans/spring-beans.xsd
	   http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd"
>

	<context:component-scan base-package="org.yangushan"/>



		<!--  一个abstract的BeanDefinition不会生成真正的bean，但是它作为父类的属性会被子类继承	-->
	<bean id="user" class="org.yangushan.service.User" scope="prototype" abstract="true"/>

	<!--  这个bean继承了抽象的user，所以会继承它的一些属性，比如scope，所以这里的user2也是一个原型	-->
	<bean id="user2" class="org.yangushan.service.User" parent="user"/>

<!--	测试autowired=constructor的情况-->
	<bean id="c6" class="org.yangushan.service.constructor.C6" autowire="constructor"/>

	<bean id="person" class="org.yangushan.service.Person"/>

<!--	先把要进行替换的replacer进行注册-->
	<bean id="myReplacer" class="org.yangushan.service.constructor.MyReplacer"/>
	<!-- 然后在这里设置我们哪个方法进行replace-->
	<bean id="replaceTest" class="org.yangushan.service.constructor.ReplacedTest">
		<replaced-method name="test" replacer="myReplacer"/>
	</bean>
</beans>